name: CI/CD Pipeline for AWS

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main
          
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend-redis, backend-rds]  
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-north-1'
    
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    
      - name: Set IMAGE_TAG and create .env file
        run: |
          IMAGE_TAG="${GITHUB_REF#refs/heads/}-$(git rev-parse --short HEAD)"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV  

          # Update the .env file based on the received IMAGE_TAG
          if grep -q "IMAGE_TAG=" .env; then
            sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${IMAGE_TAG}/" .env  # Replace the value of IMAGE_TAG
          else
            echo "IMAGE_TAG=${IMAGE_TAG}" >> .env  # If IMAGE_TAG does not exist, add it
          fi

      - name: Building a Docker image
        run: |
          cd ${{ matrix.service }}
          docker build -t 440744228341.dkr.ecr.eu-north-1.amazonaws.com/${{ matrix.service }}:$IMAGE_TAG .
    
      - name: Pushing a Docker image to ECR
        run: |
          docker push 440744228341.dkr.ecr.eu-north-1.amazonaws.com/${{ matrix.service }}:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  
    strategy:
      matrix:
        service: [frontend, backend-redis, backend-rds]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-north-1'

      - name: Upgrade files to S3 (frontend only)
        if: matrix.service == 'frontend'
        run: |
          aws s3 cp ./frontend/index.html s3://demo-bucket-website-2025/index.html 

      - name: CloudFront cache disability (frontend only)
        if: matrix.service == 'frontend'
        run: |
          aws cloudfront create-invalidation --distribution-id E1X3EVCT33LILD --paths "/*"

      - name: Debug EC2 Instance ID
        run: echo "EC2_INSTANCE_ID=${{ env.EC2_INSTANCE_ID }}"

      - name: Get EC2 public IP
        id: ec2_ip
        run: |
          EC2_INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
          EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-id $EC2_INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region eu-north-1)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Connect to EC2 and update containers
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'

            cd /home/ubuntu/GAME
            git pull origin main
           
            IMAGE_TAG="${{ env.IMAGE_TAG }}"
            if grep -q "IMAGE_TAG=" .env; then
              sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${IMAGE_TAG}/" .env  # Replace the value of IMAGE_TAG
            else
              echo "IMAGE_TAG=${IMAGE_TAG}" >> .env  # If IMAGE_TAG does not exist, add it
            fi


            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 440744228341.dkr.ecr.eu-north-1.amazonaws.com/${{ matrix.service }}
            cd /home/ubuntu/GAME  
            docker-compose --env-file /home/ubuntu/GAME/.env pull ${{ matrix.service }}:${IMAGE_TAG}
            docker-compose --env-file /home/ubuntu/GAME/.env up -d ${{ matrix.service }}
            docker ps -a
            docker image prune -f  # Delete old unnecessary images
          EOF

