name: CI/CD Pipeline for AWS

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-north-1'

      - name: Frontend Updates
        run: |
          echo "Uploading frontend index.html to S3 bucket..."
          aws s3 cp ./frontend/index.html s3://demo-bucket-website-2025/index.html

          echo "Invalidating CloudFront cache..."
          aws cloudfront create-invalidation --distribution-id E1X3EVCT33LILD --paths "/*"
          
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
    
      - name: Build and Push Docker Images
        run: |
          docker build -t 440744228341.dkr.ecr.eu-north-1.amazonaws.com/backend-redis:latest backend-redis
          docker push 440744228341.dkr.ecr.eu-north-1.amazonaws.com/backend-redis:latest

          docker build -t 440744228341.dkr.ecr.eu-north-1.amazonaws.com/backend-rds:latest backend-rds
          docker push 440744228341.dkr.ecr.eu-north-1.amazonaws.com/backend-rds:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-north-1'

      - name: Verify AWS CLI Access
        run: |
          echo "Checking AWS CLI configuration..."
          aws sts get-caller-identity
          aws ecr describe-repositories --region eu-north-1
        
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check ECR Images
        run: |
          echo "Checking ECR repositories and images..."
          aws ecr list-images --repository-name backend-redis --region eu-north-1
          aws ecr list-images --repository-name backend-rds --region eu-north-1
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
    
      - name: Get EC2 public IP
        id: ec2_ip
        run: |
          EC2_INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
          EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-id $EC2_INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region eu-north-1)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

      - name: Show EC2 Public IP
        run: echo "EC2_PUBLIC_IP=${{ env.EC2_PUBLIC_IP }}"
      
      - name: Deploy Services to EC2
        run: |
          echo "Testing SSH connection to EC2..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            cd /home/ubuntu/GAME

            echo "Pulling the latest changes from Git..."
            git fetch origin main
            git config pull.rebase false  
            git diff --exit-code origin/main || echo "Changes detected, pulling..."
            git pull origin main

            # Authenticate Docker to AWS ECR
            echo "Logging into AWS ECR..."
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 440744228341.dkr.ecr.eu-north-1.amazonaws.com
            
            docker-compose pull

            echo "Restarting Docker containers..."
            docker-compose down
            docker-compose up -d

            docker ps -a
          EOF