name: CI/CD Pipeline for AWS

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main
          
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend_redis, backend_rds]  
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-north-1'
    
      - name: Вхід в AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
    
      - name: Tag specification for Docker image
        run: |
          echo "IMAGE_TAG=$(echo ${GITHUB_REF#refs/heads/}-$(git rev-parse --short HEAD))" >> $GITHUB_ENV
    
      - name: Building a Docker image
        run: |
          docker build -t 440744228341.dkr.ecr.eu-north-1.amazonaws.com/${{ matrix.service }}:$IMAGE_TAG .
    
      - name: Pushing a Docker image to ECR
        run: |
          docker push 440744228341.dkr.ecr.eu-north-1.amazonaws.com/${{ matrix.service }}:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  
    strategy:
      matrix:
        service: [frontend, backend_redis, backend_rds]

    steps:
      - name: Upgrade files to S3 (frontend only)
        if: matrix.service == 'frontend'
        run: |
          aws s3 cp frontend/index.html s3://demo-bucket-website-2025/ --acl public-read

      - name: CloudFront cache disability (frontend only)
        if: matrix.service == 'frontend'
        run: |
          aws cloudfront create-invalidation --distribution-id E1X3EVCT33LILD --paths "/*"
      
      - name: Set image tag for Docker Compose
        run: echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

      - name: Connect to EC2 and update containers
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
            cd /home/ubuntu/GAME  
            IMAGE_TAG=${{ env.IMAGE_TAG }} docker-compose pull ${{ matrix.service }}
            IMAGE_TAG=${{ env.IMAGE_TAG }} docker-compose up -d ${{ matrix.service }}
            docker image prune -f  # Delete old unnecessary images
