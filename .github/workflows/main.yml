name: CI/CD Pipeline for AWS

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-north-1'
    
      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
    
      - name: Set IMAGE_TAG
        run: |
          IMAGE_TAG="${GITHUB_REF_NAME}-$(git rev-parse --short HEAD)"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build and Push Docker Images
        run: |
          for SERVICE in frontend backend-redis backend-rds; do
            echo "Building and pushing $SERVICE"
            docker build -t 440744228341.dkr.ecr.eu-north-1.amazonaws.com/$SERVICE:$IMAGE_TAG $SERVICE
            docker push 440744228341.dkr.ecr.eu-north-1.amazonaws.com/$SERVICE:$IMAGE_TAG
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-north-1'

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Debug EC2 Instance ID
        run: echo "EC2_INSTANCE_ID=${{ env.EC2_INSTANCE_ID }}"

      - name: Get EC2 public IP
        id: ec2_ip
        run: |
          EC2_INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
          EC2_PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-id $EC2_INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text \
            --region eu-north-1)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV


      - name: Deploy Services to EC2
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            set -e
            cd /home/ubuntu/GAME
            export IMAGE_TAG=${{ env.IMAGE_TAG }}

            # Ensure yq is installed
            if ! command -v yq &> /dev/null; then
              echo "Installing yq"
              sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
              sudo chmod +x /usr/local/bin/yq
            fi

            echo "Updating docker-compose.yml"
            yq e '.services.backend_rds.image = strenv("440744228341.dkr.ecr.eu-north-1.amazonaws.com/backend-rds:"+env.IMAGE_TAG)' -i docker-compose.yml
            yq e '.services.backend_redis.image = strenv("440744228341.dkr.ecr.eu-north-1.amazonaws.com/backend-redis:"+env.IMAGE_TAG)' -i docker-compose.yml
            yq e '.services.frontend.image = strenv("440744228341.dkr.ecr.eu-north-1.amazonaws.com/frontend:"+env.IMAGE_TAG)' -i docker-compose.yml

            echo "Restarting Docker containers"
            sudo docker-compose down
            sudo docker-compose up -d
            docker ps -a
          EOF
